#!/usr/bin/env ruby

require 'compass'

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.
#

Compass.add_project_configuration 'compass.rb'

preprocess do
  # Item for each tag, to generate tag pages
  all_tags.each do |tag|
    items << Nanoc::Item.new(
      "",
      { :tag => tag, :items_with_tag => items_with_tag(tag)},
      "/categories/#{tag}")
  end
  # Item for homepage
  items << Nanoc::Item.new("", {:tag => 1}, "/")
  # Item for blog homepage
  items << Nanoc::Item.new("", {:tag => 1}, "/blog/")
  
  # have to do this stuff in preprocessing because items are frozen during compilation

  
  all_pages = items.select { |i| i.identifier.start_with? '/pages' }
  all_posts = items.select { |i| i.identifier.start_with? '/blog' }
  # Shouldn't have to do this, but it crashes otherwise...
  all_pages = all_pages.map { |p| { :title => p[:title], :path => p.identifier } }
  all_posts = all_posts.map { |p| { :title => p[:title], :path => p.identifier } }
  items.each do |item|
    item[:all_pages] = all_pages
    item[:all_posts] = all_posts

    item[:all_tags] = all_tags.map do |tag| 
      { :name => tag, :path => "/categories/#{tag}" }
    end

    if item[:rating] then
      item[:star_html] = make_stars item[:rating]
    end

    if item[:created_on] 
      item[:created_on] = Date.strptime(item[:created_on], "%m/%d/%Y").strftime("%B %d, %Y")
    end


  end
end


compile '/assets/humans/' do
end

compile '/assets/robots/' do
end

compile '/assets/scss/*' do
  filter :sass, Compass.sass_engine_options.merge(:syntax => item[:extension].to_sym)
end

compile '/assets/js/*' do
end
compile '/assets/img/*' do
end
compile '/assets/fonts/*' do
end

compile '/articles/*' do
  if item.binary?
  else
    filter :kramdown
    filter :image_links
    layout 'article'
  end
end

compile '/blog/*' do
  if item.binary?
  else
    filter :kramdown
    filter :image_links
    layout 'article'
  end
end

compile '/categories/*' do
  layout 'tag'
end

compile '/pages/*' do
  if item.binary?
  else
    filter :kramdown
    filter :image_links
    layout 'page'
  end
end

compile '/' do
  layout 'home'
end

compile '/blog/' do
  layout 'blog_home'
end

route '/assets/humans/' do
  '/humans.txt' 
end

route '/assets/robots/' do
  '/robots.txt' 
end

route '/assets/scss/*' do
  '/css/' + File.basename(item.identifier) + '.css'
end

route '/assets/img/*' do
  '/layout_img/' + File.basename(item.identifier) + '.' + item[:extension]
end

route '/assets/js/*' do
  '/js/' + File.basename(item.identifier) + '.js'
end

route '/assets/fonts/*' do
  '/fonts/' + File.basename(item.identifier) + '.' + item[:extension] 
end

route '/assets/bower/*' do
  '/bower_components' + item.identifier.chop + '.' + item[:extension]
end

route '/articles/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

route '/blog/*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

route '/blog/' do
  '/blog/index.html'
end

route '/categories/*' do
  item.identifier + 'index.html'
end

route '/pages/*' do
  item.identifier + 'index.html'
end

route '/' do
  '/index.html'
end

layout '*', :my_mustache
